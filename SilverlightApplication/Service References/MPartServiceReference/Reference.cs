//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverlightApplication.MPartServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MPartParamDTO", Namespace="http://schemas.datacontract.org/2004/07/AppService.MPart")]
    public partial class MPartParamDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> CreateTimeEndPointField;
        
        private System.Nullable<System.DateTime> CreateTimeStartPointField;
        
        private string MPartNumberField;
        
        private int PageIndexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateTimeEndPoint {
            get {
                return this.CreateTimeEndPointField;
            }
            set {
                if ((this.CreateTimeEndPointField.Equals(value) != true)) {
                    this.CreateTimeEndPointField = value;
                    this.RaisePropertyChanged("CreateTimeEndPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateTimeStartPoint {
            get {
                return this.CreateTimeStartPointField;
            }
            set {
                if ((this.CreateTimeStartPointField.Equals(value) != true)) {
                    this.CreateTimeStartPointField = value;
                    this.RaisePropertyChanged("CreateTimeStartPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MPartNumber {
            get {
                return this.MPartNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MPartNumberField, value) != true)) {
                    this.MPartNumberField = value;
                    this.RaisePropertyChanged("MPartNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MPartResultDTO", Namespace="http://schemas.datacontract.org/2004/07/AppService.MPart")]
    public partial class MPartResultDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightApplication.MPartServiceReference.Base_MPart> MPartListField;
        
        private int TotalCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightApplication.MPartServiceReference.Base_MPart> MPartList {
            get {
                return this.MPartListField;
            }
            set {
                if ((object.ReferenceEquals(this.MPartListField, value) != true)) {
                    this.MPartListField = value;
                    this.RaisePropertyChanged("MPartList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Base_MPart", Namespace="http://schemas.datacontract.org/2004/07/AppService.Base")]
    public partial class Base_MPart : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.Guid> CurrentComboKeyField;
        
        private string CurrentVersionField;
        
        private string DPartVersionField;
        
        private string MPartNumberField;
        
        private string MaterialPropertyField;
        
        private string NodeTypeField;
        
        private byte[] timestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> CurrentComboKey {
            get {
                return this.CurrentComboKeyField;
            }
            set {
                if ((this.CurrentComboKeyField.Equals(value) != true)) {
                    this.CurrentComboKeyField = value;
                    this.RaisePropertyChanged("CurrentComboKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DPartVersion {
            get {
                return this.DPartVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.DPartVersionField, value) != true)) {
                    this.DPartVersionField = value;
                    this.RaisePropertyChanged("DPartVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MPartNumber {
            get {
                return this.MPartNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MPartNumberField, value) != true)) {
                    this.MPartNumberField = value;
                    this.RaisePropertyChanged("MPartNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaterialProperty {
            get {
                return this.MaterialPropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.MaterialPropertyField, value) != true)) {
                    this.MaterialPropertyField = value;
                    this.RaisePropertyChanged("MaterialProperty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeType {
            get {
                return this.NodeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeTypeField, value) != true)) {
                    this.NodeTypeField = value;
                    this.RaisePropertyChanged("NodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((object.ReferenceEquals(this.timestampField, value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="MPartServiceReference.MPartService")]
    public interface MPartService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MPartService/ExcuteCommand", ReplyAction="urn:MPartService/ExcuteCommandResponse")]
        System.IAsyncResult BeginExcuteCommand(System.AsyncCallback callback, object asyncState);
        
        void EndExcuteCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MPartService/GetMPartSearch", ReplyAction="urn:MPartService/GetMPartSearchResponse")]
        System.IAsyncResult BeginGetMPartSearch(SilverlightApplication.MPartServiceReference.MPartParamDTO inputDTO, System.AsyncCallback callback, object asyncState);
        
        SilverlightApplication.MPartServiceReference.MPartResultDTO EndGetMPartSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:MPartService/ReturnExceptionSearch", ReplyAction="urn:MPartService/ReturnExceptionSearchResponse")]
        System.IAsyncResult BeginReturnExceptionSearch(System.AsyncCallback callback, object asyncState);
        
        void EndReturnExceptionSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MPartServiceChannel : SilverlightApplication.MPartServiceReference.MPartService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMPartSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMPartSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightApplication.MPartServiceReference.MPartResultDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightApplication.MPartServiceReference.MPartResultDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MPartServiceClient : System.ServiceModel.ClientBase<SilverlightApplication.MPartServiceReference.MPartService>, SilverlightApplication.MPartServiceReference.MPartService {
        
        private BeginOperationDelegate onBeginExcuteCommandDelegate;
        
        private EndOperationDelegate onEndExcuteCommandDelegate;
        
        private System.Threading.SendOrPostCallback onExcuteCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMPartSearchDelegate;
        
        private EndOperationDelegate onEndGetMPartSearchDelegate;
        
        private System.Threading.SendOrPostCallback onGetMPartSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginReturnExceptionSearchDelegate;
        
        private EndOperationDelegate onEndReturnExceptionSearchDelegate;
        
        private System.Threading.SendOrPostCallback onReturnExceptionSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MPartServiceClient() {
        }
        
        public MPartServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MPartServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MPartServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MPartServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExcuteCommandCompleted;
        
        public event System.EventHandler<GetMPartSearchCompletedEventArgs> GetMPartSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReturnExceptionSearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication.MPartServiceReference.MPartService.BeginExcuteCommand(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExcuteCommand(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightApplication.MPartServiceReference.MPartService.EndExcuteCommand(System.IAsyncResult result) {
            base.Channel.EndExcuteCommand(result);
        }
        
        private System.IAsyncResult OnBeginExcuteCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication.MPartServiceReference.MPartService)(this)).BeginExcuteCommand(callback, asyncState);
        }
        
        private object[] OnEndExcuteCommand(System.IAsyncResult result) {
            ((SilverlightApplication.MPartServiceReference.MPartService)(this)).EndExcuteCommand(result);
            return null;
        }
        
        private void OnExcuteCommandCompleted(object state) {
            if ((this.ExcuteCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExcuteCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExcuteCommandAsync() {
            this.ExcuteCommandAsync(null);
        }
        
        public void ExcuteCommandAsync(object userState) {
            if ((this.onBeginExcuteCommandDelegate == null)) {
                this.onBeginExcuteCommandDelegate = new BeginOperationDelegate(this.OnBeginExcuteCommand);
            }
            if ((this.onEndExcuteCommandDelegate == null)) {
                this.onEndExcuteCommandDelegate = new EndOperationDelegate(this.OnEndExcuteCommand);
            }
            if ((this.onExcuteCommandCompletedDelegate == null)) {
                this.onExcuteCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExcuteCommandCompleted);
            }
            base.InvokeAsync(this.onBeginExcuteCommandDelegate, null, this.onEndExcuteCommandDelegate, this.onExcuteCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication.MPartServiceReference.MPartService.BeginGetMPartSearch(SilverlightApplication.MPartServiceReference.MPartParamDTO inputDTO, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMPartSearch(inputDTO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightApplication.MPartServiceReference.MPartResultDTO SilverlightApplication.MPartServiceReference.MPartService.EndGetMPartSearch(System.IAsyncResult result) {
            return base.Channel.EndGetMPartSearch(result);
        }
        
        private System.IAsyncResult OnBeginGetMPartSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightApplication.MPartServiceReference.MPartParamDTO inputDTO = ((SilverlightApplication.MPartServiceReference.MPartParamDTO)(inValues[0]));
            return ((SilverlightApplication.MPartServiceReference.MPartService)(this)).BeginGetMPartSearch(inputDTO, callback, asyncState);
        }
        
        private object[] OnEndGetMPartSearch(System.IAsyncResult result) {
            SilverlightApplication.MPartServiceReference.MPartResultDTO retVal = ((SilverlightApplication.MPartServiceReference.MPartService)(this)).EndGetMPartSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMPartSearchCompleted(object state) {
            if ((this.GetMPartSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMPartSearchCompleted(this, new GetMPartSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMPartSearchAsync(SilverlightApplication.MPartServiceReference.MPartParamDTO inputDTO) {
            this.GetMPartSearchAsync(inputDTO, null);
        }
        
        public void GetMPartSearchAsync(SilverlightApplication.MPartServiceReference.MPartParamDTO inputDTO, object userState) {
            if ((this.onBeginGetMPartSearchDelegate == null)) {
                this.onBeginGetMPartSearchDelegate = new BeginOperationDelegate(this.OnBeginGetMPartSearch);
            }
            if ((this.onEndGetMPartSearchDelegate == null)) {
                this.onEndGetMPartSearchDelegate = new EndOperationDelegate(this.OnEndGetMPartSearch);
            }
            if ((this.onGetMPartSearchCompletedDelegate == null)) {
                this.onGetMPartSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMPartSearchCompleted);
            }
            base.InvokeAsync(this.onBeginGetMPartSearchDelegate, new object[] {
                        inputDTO}, this.onEndGetMPartSearchDelegate, this.onGetMPartSearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication.MPartServiceReference.MPartService.BeginReturnExceptionSearch(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReturnExceptionSearch(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightApplication.MPartServiceReference.MPartService.EndReturnExceptionSearch(System.IAsyncResult result) {
            base.Channel.EndReturnExceptionSearch(result);
        }
        
        private System.IAsyncResult OnBeginReturnExceptionSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication.MPartServiceReference.MPartService)(this)).BeginReturnExceptionSearch(callback, asyncState);
        }
        
        private object[] OnEndReturnExceptionSearch(System.IAsyncResult result) {
            ((SilverlightApplication.MPartServiceReference.MPartService)(this)).EndReturnExceptionSearch(result);
            return null;
        }
        
        private void OnReturnExceptionSearchCompleted(object state) {
            if ((this.ReturnExceptionSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnExceptionSearchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnExceptionSearchAsync() {
            this.ReturnExceptionSearchAsync(null);
        }
        
        public void ReturnExceptionSearchAsync(object userState) {
            if ((this.onBeginReturnExceptionSearchDelegate == null)) {
                this.onBeginReturnExceptionSearchDelegate = new BeginOperationDelegate(this.OnBeginReturnExceptionSearch);
            }
            if ((this.onEndReturnExceptionSearchDelegate == null)) {
                this.onEndReturnExceptionSearchDelegate = new EndOperationDelegate(this.OnEndReturnExceptionSearch);
            }
            if ((this.onReturnExceptionSearchCompletedDelegate == null)) {
                this.onReturnExceptionSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnExceptionSearchCompleted);
            }
            base.InvokeAsync(this.onBeginReturnExceptionSearchDelegate, null, this.onEndReturnExceptionSearchDelegate, this.onReturnExceptionSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightApplication.MPartServiceReference.MPartService CreateChannel() {
            return new MPartServiceClientChannel(this);
        }
        
        private class MPartServiceClientChannel : ChannelBase<SilverlightApplication.MPartServiceReference.MPartService>, SilverlightApplication.MPartServiceReference.MPartService {
            
            public MPartServiceClientChannel(System.ServiceModel.ClientBase<SilverlightApplication.MPartServiceReference.MPartService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginExcuteCommand(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ExcuteCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExcuteCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExcuteCommand", _args, result);
            }
            
            public System.IAsyncResult BeginGetMPartSearch(SilverlightApplication.MPartServiceReference.MPartParamDTO inputDTO, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inputDTO;
                System.IAsyncResult _result = base.BeginInvoke("GetMPartSearch", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightApplication.MPartServiceReference.MPartResultDTO EndGetMPartSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightApplication.MPartServiceReference.MPartResultDTO _result = ((SilverlightApplication.MPartServiceReference.MPartResultDTO)(base.EndInvoke("GetMPartSearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReturnExceptionSearch(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ReturnExceptionSearch", _args, callback, asyncState);
                return _result;
            }
            
            public void EndReturnExceptionSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ReturnExceptionSearch", _args, result);
            }
        }
    }
}
